name: Handle deployment commands in PR Comments

on:
  issue_comment:
    types:
      - created

jobs:
  handle-deployment-on-pr-comment:
    runs-on: ubuntu-latest

    steps:
      - name: Parse Deployment Command
        id: parse_command
        run: |
          WORKFLOW_LOCAL_RUN="${{ !github.event.act }}"
          COMMENT_BODY="${{ github.event.comment.body }}"
          if [[ WORKFLOW_LOCAL_RUN ]]; then
            echo "Setting the command as a mock since it's running locally with ACT"
            COMMENT_BODY='/deploy --environment pre --project ag-summoners-sync'
          fi

          echo "Comment received: $COMMENT_BODY"

          # Initialize variables
          ENVIRONMENT=""
          PROJECT=""
          INFRA=""

          # Parse environment
          if [[ "$COMMENT_BODY" =~ --environment[[:space:]]+([a-zA-Z0-9_-]+) ]]; then
            ENVIRONMENT="${BASH_REMATCH[1]}"
            echo "Environment: $ENVIRONMENT"
          fi

          # Parse project
          if [[ "$COMMENT_BODY" =~ --project[[:space:]]+([a-zA-Z0-9_-]+) ]]; then
            PROJECT="${BASH_REMATCH[1]}"
            echo "Project: $PROJECT"
          else
            echo "No environment specified. Aborting workflow."
            exit 1  # Aborts the workflow # TODO: pass it as an output to the user notifier step
          fi

          # Parse infra
          if [[ "$COMMENT_BODY" =~ --infra[[:space:]]+([a-zA-Z0-9_-]+) ]]; then
            INFRA="${BASH_REMATCH[1]}"
            echo "Infra: $INFRA"
          fi

          # Output parsed values
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "project=$PROJECT" >> $GITHUB_OUTPUT
          echo "infra=$INFRA" >> $GITHUB_OUTPUT

      - name: Get GH Zero Day Code APP token
        if: ${{ !github.event.act }}
        uses: actions/create-github-app-token@v1
        id: zdc-auth-app-token
        with:
          app-id: ${{ vars.ZDC_AUTH_APP_ID }}
          private-key: ${{ secrets.ZDC_AUTH_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      - name: Notify the user
        uses: actions/github-script@v7
        id: notify_user
        with:
          script: |
            const environment = `${{ steps.parse_command.outputs.environment }}`;
            const project = `${{ steps.parse_command.outputs.project }}`;
            const infra = `${{ steps.parse_command.outputs.infra }}`;

            const actor = `${{ github.event.comment.user.login }}`;
            const username = (actor !== "") ? actor : 'Unknown';

            const prNumber = context.payload.issue.number;

            let message = `üöÄ Deployment action request received from user: ${username}\n`;
            if (project) {
              message += `- Project: \`${project}\`\n`;
            }
            if (environment) {
              message += `- Environment: \`${environment}\`\n`;
            }
            if (infra) {
              message += `- Infrastructure: \`${infra}\`\n`;
            }

            if (${{ github.event.act }}) {
              console.log(`Action is being runned locally by 'ACT'. 
              Skipping the notify user on PR, but output would have been:
              ${message}`);
              return { comment_id: 10 } // arbitraty mocked comment number;
            } else {
              github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: message,
              });
              console.log(`Comment REST returned data: ${JSON.stringify(comment, null, 2)}`);
              return { "comment_id": comment.data.id };
            }

      # TODO: from here, isolate them in independent workflows
      # and just call them depending on the input by having just
      # a simple and unique trigger deployment

      - name: Trigger Deployment Workflow
        uses: actions/github-script@v7
        id: trigger_deployment_workflow
        with:
          github-token: ${{ steps.zdc-auth-app-token.outputs.token || github.token }}
          script: |
            const environment = `${{ steps.parse_command.outputs.environment }}`;
            const project = `${{ steps.parse_command.outputs.project }}`;
            const workflowId = `deploy-${environment}.yml`;

            let result = "";
            let details = "";

            try {
              await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: project,
                workflow_id: workflowId,
                ref: 'main', // TODO: Change branch to ref if pre, otherwise PRO should be only on main
              });
              status = 'OK';
              details = 'succedeed';
            } catch (ex) {
              console.log(`FAILED TO TRIGGER WORKFLOW:\n${ex}`);
              status = 'ERR';
              details = `Failed to trigger the workflow ${workflowId} on repo: ${project}`;
            }

            // Return triggered details
            return {
              workflow_name: workflowId,
              status: status,
              details: details,
            };

      - name: Deploy Infra
        if: steps.parse_command.outputs.infra != ''
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            case "${{ steps.parse_command.outputs.infra }}" in
              postgres)
                echo "Deploying Postgres..."
                docker run -d --name postgres --restart always -e POSTGRES_PASSWORD=mysecretpassword postgres
                ;;
              redis)
                echo "Deploying Redis..."
                docker run -d --name redis --restart always redis
                ;;
              all)
                echo "Deploying Postgres and Redis..."
                docker run -d --name postgres --restart always -e POSTGRES_PASSWORD=mysecretpassword postgres
                docker run -d --name redis --restart always redis
                ;;
              *)
                echo "Unknown infra: ${{ steps.parse_command.outputs.infra }}"
                ;;
            esac

      - name: Update Deployment Status
        uses: actions/github-script@v7
        id: update-comment-with-deployment-status
        with:
          script: |
            const workflowLocalRun = ${{ github.event.act }};

            const commentOnPr = `${{ steps.notify_user.outputs.result }}`;
            const commentId = JSON.parse(commentOnPr).comment_id;
            console.log(`Updating comment with id ${commentId} for workflow status`);
            
            const workflowDispatchResult = `${{ steps.trigger_deployment_workflow.outputs.result }}`;
            console.log(`Trigger deployment status: ${workflowDispatchResult}`);
            const workflowDetails = JSON.parse(workflowDispatchResult);

            const runUrl = ""; // TODO: empty for now
            
            const statusIcon = workflowDetails.status === 'OK' ? '‚úÖ' : '‚ùå';
            const statusMsg = workflowDetails.details;
            const message = `${statusIcon} Deployment ${statusMsg}. [View Workflow](${runUrl})`;
            console.log(message);

            if (!workflowLocalRun) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: commentId,
                body: message,
              });
            }
